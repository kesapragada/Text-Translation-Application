"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Subscriber = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("./utils");
var _signature = _interopRequireDefault(require("./signature"));
var _axios = _interopRequireDefault(require("axios"));
var _subscriber_helper = _interopRequireDefault(require("./subscriber_helper"));
var _constants = require("./constants");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var SubscriberFactory = /*#__PURE__*/function () {
  function SubscriberFactory(config) {
    (0, _classCallCheck2["default"])(this, SubscriberFactory);
    this.config = config;
  }
  (0, _createClass2["default"])(SubscriberFactory, [{
    key: "new_user",
    value: function new_user(distinct_id) {
      return this.get_instance(distinct_id);
    }
  }, {
    key: "get_instance",
    value: function get_instance(distinct_id) {
      if (!(0, _utils.is_string)(distinct_id)) {
        throw new _utils.InputValueError("distinct_id must be a string. an Id which uniquely identify a user in your app");
      }
      distinct_id = distinct_id.trim();
      if (!distinct_id) {
        throw new _utils.InputValueError("distinct_id must be passed");
      }
      return new Subscriber(this.config, distinct_id);
    }
  }]);
  return SubscriberFactory;
}();
exports["default"] = SubscriberFactory;
var Subscriber = /*#__PURE__*/function () {
  function Subscriber(config, distinct_id) {
    (0, _classCallCheck2["default"])(this, Subscriber);
    this.config = config;
    this.distinct_id = distinct_id;
    this.__url = this.__get_url();
    this.__super_props = this.__super_properties();
    this.__errors = [];
    this.__info = [];
    this.user_operations = [];
    this._helper = new _subscriber_helper["default"]();
    this.__warnings_list = [];
  }
  (0, _createClass2["default"])(Subscriber, [{
    key: "__get_url",
    value: function __get_url() {
      return "".concat(this.config.base_url, "event/");
    }
  }, {
    key: "__get_headers",
    value: function __get_headers() {
      return {
        "Content-Type": "application/json; charset=utf-8",
        Date: new Date().toUTCString(),
        "User-Agent": this.config.user_agent
      };
    }
  }, {
    key: "__super_properties",
    value: function __super_properties() {
      return {
        $ss_sdk_version: this.config.user_agent
      };
    }
  }, {
    key: "get_events",
    value: function get_events() {
      return {
        $schema: "2",
        $insert_id: (0, _utils.uuid)(),
        $time: (0, _utils.epoch_milliseconds)(),
        env: this.config.workspace_key,
        distinct_id: this.distinct_id,
        $user_operations: this.user_operations,
        properties: this.__super_props
      };
    }
  }, {
    key: "as_json",
    value: function as_json() {
      var event_dict = {
        distinct_id: this.distinct_id,
        $user_operations: this.user_operations,
        warnings: this.__warnings_list
      };
      return event_dict;
    }
  }, {
    key: "validate_event_size",
    value: function validate_event_size(event_dict) {
      var apparent_size = (0, _utils.get_apparent_identity_event_size)(event_dict);
      if (apparent_size > _constants.IDENTITY_SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES) {
        throw new _utils.InputValueError("User Event size too big - ".concat(apparent_size, " Bytes, must not cross ").concat(_constants.IDENTITY_SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES_READABLE));
      }
      return [event_dict, apparent_size];
    }
  }, {
    key: "validate_body",
    value: function validate_body() {
      var is_part_of_bulk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.__warnings_list = [];
      if (!(0, _utils.is_empty)(this.__info)) {
        var msg = "[distinct_id: ".concat(this.distinct_id, "]").concat(this.__info.join("\n"));
        this.__warnings_list.push(msg);
        console.log("WARNING: ".concat(msg));
      }
      if (!(0, _utils.is_empty)(this.__errors)) {
        var _msg = "[distinct_id: ".concat(this.distinct_id, "] ").concat(this.__errors.join("\n"));
        this.__warnings_list.push(_msg);
        var err_msg = "ERROR: ".concat(_msg);
        if (is_part_of_bulk) {
          console.log(err_msg);
        } else {
          throw new _utils.InputValueError(err_msg);
        }
      }
      return this.__warnings_list;
    }
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var is_part_of_bulk, headers, event, _this$validate_event_, _this$validate_event_2, validated_ev, size, content_text, signature, response, ok_response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                is_part_of_bulk = false;
                this.validate_body(is_part_of_bulk);
                headers = this.__get_headers();
                event = this.get_events();
                _this$validate_event_ = this.validate_event_size(event), _this$validate_event_2 = (0, _slicedToArray2["default"])(_this$validate_event_, 2), validated_ev = _this$validate_event_2[0], size = _this$validate_event_2[1];
                content_text = JSON.stringify(validated_ev);
                signature = (0, _signature["default"])(this.__url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context.prev = 8;
                _context.next = 11;
                return _axios["default"].post(this.__url, content_text, {
                  headers: headers
                });
              case 11:
                response = _context.sent;
                ok_response = Math.floor(response.status / 100) == 2;
                if (!ok_response) {
                  _context.next = 17;
                  break;
                }
                return _context.abrupt("return", {
                  success: true,
                  status: "success",
                  status_code: response.status,
                  message: response.statusText
                });
              case 17:
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: response.status,
                  message: response.statusText
                });
              case 18:
                _context.next = 23;
                break;
              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](8);
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: _context.t0.status || 500,
                  message: _context.t0.message
                });
              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[8, 20]]);
      }));
      function save() {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }, {
    key: "_collect_event",
    value: function _collect_event() {
      var resp = this._helper.get_identity_events();
      if (!(0, _utils.is_empty)(resp["errors"])) {
        this.__errors = [].concat((0, _toConsumableArray2["default"])(this.__errors), (0, _toConsumableArray2["default"])(resp["errors"]));
      }
      if (!(0, _utils.is_empty)(resp["info"])) {
        this.__info = [].concat((0, _toConsumableArray2["default"])(this.__info), (0, _toConsumableArray2["default"])(resp["info"]));
      }
      if (!(0, _utils.is_empty)(resp["event"])) {
        this.user_operations.push(resp["event"]);
      }
    }
  }, {
    key: "append",
    value: function append(key, value) {
      var caller = "append";
      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        if (!value) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));
          return;
        } else {
          this._helper._append_kv(key, value, {}, caller);
          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._append_kv(item, key[item], key, caller);
        }
        this._collect_event();
      }
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var caller = "set";
      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        if (value === null || value === undefined) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));
          return;
        } else {
          this._helper._set_kv(key, value, {}, caller);
          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._set_kv(item, key[item], key, caller);
        }
        this._collect_event();
      }
    }
  }, {
    key: "set_once",
    value: function set_once(key, value) {
      var caller = "set_once";
      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        if (value === null || value === undefined) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));
          return;
        } else {
          this._helper._set_once_kv(key, value, {}, caller);
          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._set_once_kv(item, key[item], key, caller);
        }
        this._collect_event();
      }
    }
  }, {
    key: "increment",
    value: function increment(key, value) {
      var caller = "increment";
      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        if (value === null || value === undefined) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));
          return;
        } else {
          this._helper._increment_kv(key, value, {}, caller);
          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._increment_kv(item, key[item], key, caller);
        }
        this._collect_event();
      }
    }
  }, {
    key: "remove",
    value: function remove(key, value) {
      var caller = "remove";
      if (!(0, _utils.is_string)(key) && !(0, _utils.is_object)(key)) {
        this.__errors.push("[".concat(caller, "] arg1 must be either string or a dict"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        if (!value) {
          this.__errors.push("[".concat(caller, "] if arg1 is a string, then arg2 must be passed"));
          return;
        } else {
          this._helper._remove_kv(key, value, {}, caller);
          this._collect_event();
        }
      } else {
        for (var item in key) {
          this._helper._remove_kv(item, key[item], key, caller);
        }
        this._collect_event();
      }
    }
  }, {
    key: "unset",
    value: function unset(key) {
      var caller = "unset";
      if (!(0, _utils.is_string)(key) && !Array.isArray(key)) {
        this.__errors.push("[".concat(caller, "] key must be either string or array"));
        return;
      }
      if ((0, _utils.is_string)(key)) {
        this._helper._unset_k(key, caller);
        this._collect_event();
      } else {
        var _iterator = _createForOfIteratorHelper(key),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            this._helper._unset_k(item, caller);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this._collect_event();
      }
    }
  }, {
    key: "set_preferred_language",
    value: function set_preferred_language(lang_code) {
      var caller = "set_preferred_language";
      this._helper._set_preferred_language(lang_code, caller);
      this._collect_event();
    }
  }, {
    key: "set_timezone",
    value: function set_timezone(timezone) {
      var caller = "set_timezone";
      this._helper._set_timezone(timezone, caller);
      this._collect_event();
    }
  }, {
    key: "add_email",
    value: function add_email(email) {
      var caller = "add_email";
      this._helper._add_email(email, caller);
      this._collect_event();
    }
  }, {
    key: "remove_email",
    value: function remove_email(email) {
      var caller = "remove_email";
      this._helper._remove_email(email, caller);
      this._collect_event();
    }
  }, {
    key: "add_sms",
    value: function add_sms(mobile_no) {
      var caller = "add_sms";
      this._helper._add_sms(mobile_no, caller);
      this._collect_event();
    }
  }, {
    key: "remove_sms",
    value: function remove_sms(mobile_no) {
      var caller = "remove_sms";
      this._helper._remove_sms(mobile_no, caller);
      this._collect_event();
    }
  }, {
    key: "add_whatsapp",
    value: function add_whatsapp(mobile_no) {
      var caller = "add_whatsapp";
      this._helper._add_whatsapp(mobile_no, caller);
      this._collect_event();
    }
  }, {
    key: "remove_whatsapp",
    value: function remove_whatsapp(mobile_no) {
      var caller = "remove_whatsapp";
      this._helper._remove_whatsapp(mobile_no, caller);
      this._collect_event();
    }
  }, {
    key: "add_androidpush",
    value: function add_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = "add_androidpush";
      this._helper._add_androidpush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "remove_androidpush",
    value: function remove_androidpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fcm";
      var caller = "remove_androidpush";
      this._helper._remove_androidpush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "add_iospush",
    value: function add_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = "add_iospush";
      this._helper._add_iospush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "remove_iospush",
    value: function remove_iospush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "apns";
      var caller = "remove_iospush";
      this._helper._remove_iospush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "add_webpush",
    value: function add_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = "add_webpush";
      this._helper._add_webpush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "remove_webpush",
    value: function remove_webpush(push_token) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vapid";
      var caller = "remove_webpush";
      this._helper._remove_webpush(push_token, provider, caller);
      this._collect_event();
    }
  }, {
    key: "add_slack",
    value: function add_slack(value) {
      var caller = "add_slack";
      this._helper._add_slack(value, caller);
      this._collect_event();
    }
  }, {
    key: "remove_slack",
    value: function remove_slack(value) {
      var caller = "remove_slack";
      this._helper._remove_slack(value, caller);
      this._collect_event();
    }
  }, {
    key: "add_ms_teams",
    value: function add_ms_teams(value) {
      var caller = "add_ms_teams";
      this._helper._add_ms_teams(value, caller);
      this._collect_event();
    }
  }, {
    key: "remove_ms_teams",
    value: function remove_ms_teams(value) {
      var caller = "remove_ms_teams";
      this._helper._remove_ms_teams(value, caller);
      this._collect_event();
    }
  }, {
    key: "add_slack_email",
    value: function add_slack_email(value) {
      console.warn("add_slack_email() method has been deprecated. use add_slack() instead");
      var caller = "add_slack_email";
      this._helper._add_slack({
        email: value
      }, caller);
      this._collect_event();
    }
  }, {
    key: "remove_slack_email",
    value: function remove_slack_email(value) {
      console.warn("remove_slack_email() method has been deprecated. use remove_slack() instead");
      var caller = "remove_slack_email";
      this._helper._remove_slack({
        email: value
      }, caller);
      this._collect_event();
    }
  }, {
    key: "add_slack_userid",
    value: function add_slack_userid(value) {
      console.warn("add_slack_userid() method has been deprecated. use add_slack() instead");
      var caller = "add_slack_userid";
      this._helper._add_slack({
        user_id: value
      }, caller);
      this._collect_event();
    }
  }, {
    key: "remove_slack_userid",
    value: function remove_slack_userid(value) {
      console.warn("remove_slack_userid() method has been deprecated. use remove_slack() instead");
      var caller = "remove_slack_userid";
      this._helper._remove_slack({
        user_id: value
      }, caller);
      this._collect_event();
    }
  }]);
  return Subscriber;
}();
exports.Subscriber = Subscriber;