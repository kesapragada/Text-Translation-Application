"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.EventCollector = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("./utils");
var _signature = _interopRequireDefault(require("./signature"));
var _axios = _interopRequireDefault(require("axios"));
var _attachment = _interopRequireDefault(require("./attachment"));
var _constants = require("./constants");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var RESERVED_EVENT_NAMES = ["$identify", "$notification_delivered", "$notification_dismiss", "$notification_clicked", "$app_launched", "$user_login", "$user_logout"];
var Event = /*#__PURE__*/function () {
  function Event(distinct_id, event_name, properties) {
    var kwargs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    (0, _classCallCheck2["default"])(this, Event);
    this.distinct_id = distinct_id;
    this.event_name = event_name;
    this.properties = properties;
    this.idempotency_key = kwargs === null || kwargs === void 0 ? void 0 : kwargs.idempotency_key;
    this.tenant_id = kwargs === null || kwargs === void 0 ? void 0 : kwargs.tenant_id;
    this.brand_id = kwargs === null || kwargs === void 0 ? void 0 : kwargs.brand_id;

    // default values
    if (!this.properties) {
      this.properties = {};
    }
  }
  (0, _createClass2["default"])(Event, [{
    key: "__validate_distinct_id",
    value: function __validate_distinct_id() {
      if (typeof this.distinct_id !== "string") {
        throw new _utils.InputValueError("distinct_id must be a string. an Id which uniquely identify a user in your app");
      }
      var distinct_id = this.distinct_id.trim();
      if (!distinct_id) {
        throw new _utils.InputValueError("distinct_id missing");
      }
      this.distinct_id = distinct_id;
    }
  }, {
    key: "__validate_properties",
    value: function __validate_properties() {
      if (!(this.properties instanceof Object)) {
        throw new _utils.InputValueError("properties must be a dictionary");
      }
    }
  }, {
    key: "__check_event_prefix",
    value: function __check_event_prefix(event_name) {
      if (!RESERVED_EVENT_NAMES.includes(event_name)) {
        if ((0, _utils.has_special_char)(event_name)) {
          throw new _utils.InputValueError("event_names starting with [$,ss_] are reserved by SuprSend");
        }
      }
    }
  }, {
    key: "__validate_event_name",
    value: function __validate_event_name() {
      if (!(0, _utils.is_string)(this.event_name)) {
        throw new _utils.InputValueError("event_name must be a string");
      }
      var event_name = this.event_name.trim();
      if (!event_name) {
        throw new _utils.InputValueError("event_name missing");
      }
      this.__check_event_prefix(event_name);
      this.event_name = event_name;
    }
  }, {
    key: "add_attachment",
    value: function add_attachment(file_path) {
      var _kwargs$ignore_if_err;
      var kwargs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var file_name = kwargs === null || kwargs === void 0 ? void 0 : kwargs.file_name;
      var ignore_if_error = (_kwargs$ignore_if_err = kwargs === null || kwargs === void 0 ? void 0 : kwargs.ignore_if_error) !== null && _kwargs$ignore_if_err !== void 0 ? _kwargs$ignore_if_err : false;

      // if properties is not a dict, not raising error while adding attachment.
      if (!(this.properties instanceof Object)) {
        console.log("WARNING: attachment cannot be added. please make sure properties is a dictionary. Event" + JSON.stringify(this.as_json()));
        return;
      }
      var attachment = (0, _attachment["default"])(file_path, file_name, ignore_if_error);
      if (!attachment) {
        return;
      }
      // --- add the attachment to properties->$attachments
      if (!this.properties["$attachments"]) {
        this.properties["$attachments"] = [];
      }
      this.properties["$attachments"].push(attachment);
    }
  }, {
    key: "get_final_json",
    value: function get_final_json(config) {
      var is_part_of_bulk = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // --- validate
      this.__validate_distinct_id();
      this.__validate_event_name();
      this.__validate_properties();
      var super_props = {
        $ss_sdk_version: config.user_agent
      };
      var event_dict = {
        $insert_id: (0, _utils.uuid)(),
        $time: (0, _utils.epoch_milliseconds)(),
        event: this.event_name,
        env: config.workspace_key,
        distinct_id: this.distinct_id,
        properties: _objectSpread(_objectSpread({}, this.properties), super_props)
      };
      if (this.idempotency_key) {
        event_dict["$idempotency_key"] = this.idempotency_key;
      }
      if (this.tenant_id) {
        event_dict["tenant_id"] = this.tenant_id;
      }
      if (this.brand_id) {
        event_dict["brand_id"] = this.brand_id;
      }
      event_dict = (0, _utils.validate_track_event_schema)(event_dict);
      var apparent_size = (0, _utils.get_apparent_event_size)(event_dict, is_part_of_bulk);
      if (apparent_size > _constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES) {
        throw new _utils.InputValueError("Event size too big - ".concat(apparent_size, " Bytes,must not cross ").concat(_constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES_READABLE));
      }
      return [event_dict, apparent_size];
    }
  }, {
    key: "as_json",
    value: function as_json() {
      var event_dict = {
        event: this.event_name,
        distinct_id: this.distinct_id,
        properties: this.properties
      };
      if (this.idempotency_key) {
        event_dict["$idempotency_key"] = this.idempotency_key;
      }
      if (this.tenant_id) {
        event_dict["tenant_id"] = this.tenant_id;
      }
      if (this.brand_id) {
        event_dict["brand_id"] = this.brand_id;
      }
      return event_dict;
    }
  }]);
  return Event;
}();
exports["default"] = Event;
var EventCollector = /*#__PURE__*/function () {
  function EventCollector(config) {
    (0, _classCallCheck2["default"])(this, EventCollector);
    this.config = config;
    this.__url = this.__get_url();
    this.__headers = this.__common_headers();
  }
  (0, _createClass2["default"])(EventCollector, [{
    key: "__get_url",
    value: function __get_url() {
      return "".concat(this.config.base_url, "event/");
    }
  }, {
    key: "__common_headers",
    value: function __common_headers() {
      return {
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": this.config.user_agent
      };
    }
  }, {
    key: "__dynamic_headers",
    value: function __dynamic_headers() {
      return {
        Date: new Date().toUTCString()
      };
    }
  }, {
    key: "collect",
    value: function collect(event) {
      var _event$get_final_json = event.get_final_json(this.config, false),
        _event$get_final_json2 = (0, _slicedToArray2["default"])(_event$get_final_json, 2),
        event_dict = _event$get_final_json2[0],
        event_size = _event$get_final_json2[1];
      return this.send(event_dict);
    }
  }, {
    key: "send",
    value: function () {
      var _send = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
        var headers, content_text, signature, response, ok_response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                content_text = JSON.stringify(event);
                signature = (0, _signature["default"])(this.__url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context.prev = 4;
                _context.next = 7;
                return _axios["default"].post(this.__url, content_text, {
                  headers: headers
                });
              case 7:
                response = _context.sent;
                ok_response = Math.floor(response.status / 100) == 2;
                if (!ok_response) {
                  _context.next = 13;
                  break;
                }
                return _context.abrupt("return", {
                  success: true,
                  status: "success",
                  status_code: response.status,
                  message: response.statusText
                });
              case 13:
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: response.status,
                  message: response.statusText
                });
              case 14:
                _context.next = 19;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](4);
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: _context.t0.status || 500,
                  message: _context.t0.message
                });
              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 16]]);
      }));
      function send(_x) {
        return _send.apply(this, arguments);
      }
      return send;
    }()
  }]);
  return EventCollector;
}();
exports.EventCollector = EventCollector;