"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports._WorkflowTrigger = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _axios = _interopRequireDefault(require("axios"));
var _signature = _interopRequireDefault(require("./signature"));
var _utils = require("./utils");
var _attachment = _interopRequireDefault(require("./attachment"));
var _constants = require("./constants");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Workflow = /*#__PURE__*/function () {
  function Workflow(body) {
    var kwargs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2["default"])(this, Workflow);
    if (!(body instanceof Object)) {
      throw new _utils.InputValueError("workflow body must be a json/dictionary");
    }
    this.body = body;
    this.idempotency_key = kwargs === null || kwargs === void 0 ? void 0 : kwargs.idempotency_key;
    this.tenant_id = kwargs === null || kwargs === void 0 ? void 0 : kwargs.tenant_id;
    this.brand_id = kwargs === null || kwargs === void 0 ? void 0 : kwargs.brand_id;
  }
  (0, _createClass2["default"])(Workflow, [{
    key: "add_attachment",
    value: function add_attachment() {
      var _kwargs$ignore_if_err, _this$body;
      var file_path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var kwargs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var file_name = kwargs === null || kwargs === void 0 ? void 0 : kwargs.file_name;
      var ignore_if_error = (_kwargs$ignore_if_err = kwargs === null || kwargs === void 0 ? void 0 : kwargs.ignore_if_error) !== null && _kwargs$ignore_if_err !== void 0 ? _kwargs$ignore_if_err : false;
      if (!((_this$body = this.body) !== null && _this$body !== void 0 && _this$body.data)) {
        this.body.data = {};
      }
      // if body["data"] is not a dict, not raising error while adding attachment.
      if (!(this.body["data"] instanceof Object)) {
        console.log("WARNING: attachment cannot be added. please make sure body['data'] is a dictionary. Workflow ".concat(JSON.stringify(JSON.stringify(this.as_json()))));
        return;
      }
      var attachment = (0, _attachment["default"])(file_path, file_name, ignore_if_error);
      if (!attachment) {
        return;
      }
      if (!this.body.data["$attachments"]) {
        this.body["data"]["$attachments"] = [];
      }
      this.body["data"]["$attachments"].push(attachment);
    }
  }, {
    key: "get_final_json",
    value: function get_final_json(config) {
      var is_part_of_bulk = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // add idempotency key in body if present
      if (this.idempotency_key) {
        this.body["$idempotency_key"] = this.idempotency_key;
      }
      if (this.tenant_id) {
        this.body["tenant_id"] = this.tenant_id;
      }
      if (this.brand_id) {
        this.body["brand_id"] = this.brand_id;
      }
      this.body = (0, _utils.validate_workflow_body_schema)(this.body);
      var apparent_size = (0, _utils.get_apparent_workflow_body_size)(this.body, is_part_of_bulk); // review
      if (apparent_size > _constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES) {
        throw new _utils.InputValueError("workflow body too big - ".concat(apparent_size, " Bytes, must not cross ").concat(_constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES_READABLE));
      }
      return [this.body, apparent_size];
    }
  }, {
    key: "as_json",
    value: function as_json() {
      var body_dict = _objectSpread({}, this.body);
      if (this.idempotency_key) {
        body_dict["$idempotency_key"] = this.idempotency_key;
      }
      if (this.tenant_id) {
        body_dict["tenant_id"] = this.tenant_id;
      }
      if (this.brand_id) {
        body_dict["brand_id"] = this.brand_id;
      }
      return body_dict;
    }
  }]);
  return Workflow;
}();
exports["default"] = Workflow;
var _WorkflowTrigger = /*#__PURE__*/function () {
  function _WorkflowTrigger(config) {
    (0, _classCallCheck2["default"])(this, _WorkflowTrigger);
    this.config = config;
    this.url = this._get_url();
  }
  (0, _createClass2["default"])(_WorkflowTrigger, [{
    key: "_get_url",
    value: function _get_url() {
      return "".concat(this.config.base_url).concat(this.config.workspace_key, "/trigger/");
    }
  }, {
    key: "_get_headers",
    value: function _get_headers() {
      return {
        "Content-Type": "application/json; charset=utf-8",
        Date: new Date().toUTCString(),
        "User-Agent": this.config.user_agent
      };
    }
  }, {
    key: "trigger",
    value: function trigger(workflow) {
      var is_part_of_bulk = false;
      var _workflow$get_final_j = workflow.get_final_json(this.config, is_part_of_bulk),
        _workflow$get_final_j2 = (0, _slicedToArray2["default"])(_workflow$get_final_j, 2),
        workflow_body = _workflow$get_final_j2[0],
        body_size = _workflow$get_final_j2[1];
      return this.send(workflow_body);
    }
  }, {
    key: "send",
    value: function () {
      var _send = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(workflow_body) {
        var headers, content_text, signature, response, ok_response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                headers = this._get_headers();
                content_text = JSON.stringify(workflow_body);
                signature = (0, _signature["default"])(this.url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context.prev = 4;
                _context.next = 7;
                return _axios["default"].post(this.url, content_text, {
                  headers: headers
                });
              case 7:
                response = _context.sent;
                ok_response = Math.floor(response.status / 100) == 2;
                if (!ok_response) {
                  _context.next = 13;
                  break;
                }
                return _context.abrupt("return", {
                  success: true,
                  status: "success",
                  status_code: response.status,
                  message: response.statusText
                });
              case 13:
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: response.status,
                  message: response.statusText
                });
              case 14:
                _context.next = 19;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](4);
                return _context.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: _context.t0.status || 500,
                  message: _context.t0.message
                });
              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 16]]);
      }));
      function send(_x) {
        return _send.apply(this, arguments);
      }
      return send;
    }()
  }]);
  return _WorkflowTrigger;
}();
exports._WorkflowTrigger = _WorkflowTrigger;