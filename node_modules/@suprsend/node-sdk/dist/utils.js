"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuprsendError = exports.SuprsendConfigError = exports.SuprsendApiError = exports.InputValueError = void 0;
exports.base64Encode = base64Encode;
exports.epoch_milliseconds = epoch_milliseconds;
exports.get_apparent_event_size = get_apparent_event_size;
exports.get_apparent_identity_event_size = get_apparent_identity_event_size;
exports.get_apparent_list_broadcast_body_size = get_apparent_list_broadcast_body_size;
exports.get_apparent_workflow_body_size = get_apparent_workflow_body_size;
exports.has_special_char = void 0;
exports.invalid_record_json = invalid_record_json;
exports.is_empty = is_empty;
exports.is_object = is_object;
exports.is_string = is_string;
exports.resolveTilde = resolveTilde;
exports.uuid = uuid;
exports.validate_list_broadcast_body_schema = validate_list_broadcast_body_schema;
exports.validate_track_event_schema = validate_track_event_schema;
exports.validate_workflow_body_schema = validate_workflow_body_schema;
exports.validate_workflow_trigger_body_schema = validate_workflow_trigger_body_schema;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _os = _interopRequireDefault(require("os"));
var _fs = _interopRequireDefault(require("fs"));
var _jsonschema = require("jsonschema");
var _uuid = require("uuid");
var _constants = require("./constants");
var _lodash = require("lodash");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var workflow_schema = require("./request_json/workflow.json");
var workflow_trigger_schema = require("./request_json/workflow_trigger.json");
var event_schema = require("./request_json/event.json");
var list_broadcast_schema = require("./request_json/list_broadcast.json");
function base64Encode(file) {
  var body = _fs["default"].readFileSync(file);
  return body.toString("base64");
}
function resolveTilde(filePath) {
  if (!filePath || typeof filePath !== "string") {
    return "";
  }
  if (filePath.startsWith("~/") || filePath === "~") {
    return filePath.replace("~", _os["default"].homedir());
  }
  return filePath;
}
var SuprsendError = /*#__PURE__*/function (_Error) {
  (0, _inherits2["default"])(SuprsendError, _Error);
  var _super = _createSuper(SuprsendError);
  function SuprsendError(message) {
    var _this;
    (0, _classCallCheck2["default"])(this, SuprsendError);
    _this = _super.call(this, message);
    _this.name = "SuprsendError";
    return _this;
  }
  return SuprsendError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
exports.SuprsendError = SuprsendError;
var SuprsendConfigError = /*#__PURE__*/function (_Error2) {
  (0, _inherits2["default"])(SuprsendConfigError, _Error2);
  var _super2 = _createSuper(SuprsendConfigError);
  function SuprsendConfigError(message) {
    var _this2;
    (0, _classCallCheck2["default"])(this, SuprsendConfigError);
    _this2 = _super2.call(this, message);
    _this2.name = "SuprsendConfigError";
    return _this2;
  }
  return SuprsendConfigError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
exports.SuprsendConfigError = SuprsendConfigError;
var SuprsendApiError = /*#__PURE__*/function (_Error3) {
  (0, _inherits2["default"])(SuprsendApiError, _Error3);
  var _super3 = _createSuper(SuprsendApiError);
  function SuprsendApiError(error) {
    var _this3;
    (0, _classCallCheck2["default"])(this, SuprsendApiError);
    var message;
    if (error.response) {
      message = "".concat(error.response.status, ": ").concat(error.response.data.message);
    } else {
      message = error.message;
    }
    _this3 = _super3.call(this, message);
    _this3.name = "SuprsendApiError";
    return _this3;
  }
  return SuprsendApiError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
exports.SuprsendApiError = SuprsendApiError;
var InputValueError = /*#__PURE__*/function (_Error4) {
  (0, _inherits2["default"])(InputValueError, _Error4);
  var _super4 = _createSuper(InputValueError);
  function InputValueError(message) {
    var _this4;
    (0, _classCallCheck2["default"])(this, InputValueError);
    _this4 = _super4.call(this, message);
    _this4.name = "InputValueError";
    return _this4;
  }
  return InputValueError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
exports.InputValueError = InputValueError;
function is_string(value) {
  return typeof value === "string";
}
function is_object(value) {
  return (0, _typeof2["default"])(value) === "object" && !Array.isArray(value) && value !== null;
}
function is_empty(value) {
  if (is_object(value)) {
    return Object.keys(value) <= 0;
  } else if (Array.isArray(value)) {
    return value.length <= 0;
  } else {
    return !value;
  }
}
var has_special_char = function has_special_char(str) {
  var _str$toLowerCase;
  return str.startsWith("$") || (str === null || str === void 0 ? void 0 : (_str$toLowerCase = str.toLowerCase()) === null || _str$toLowerCase === void 0 ? void 0 : _str$toLowerCase.startsWith("ss_"));
};
exports.has_special_char = has_special_char;
function uuid() {
  return (0, _uuid.v4)();
}
function epoch_milliseconds() {
  return Math.round(Date.now());
}
function validate_workflow_body_schema(body) {
  if (!(body !== null && body !== void 0 && body.data)) {
    body.data = {};
  }
  if (!(body.data instanceof Object)) {
    throw new InputValueError("data must be a object");
  }
  var schema = workflow_schema;
  var v = new _jsonschema.Validator();
  var validated_data = v.validate(body, schema);
  if (validated_data.valid) {
    return body;
  } else {
    var error_obj = validated_data.errors[0];
    var error_msg = "".concat(error_obj.property, " ").concat(error_obj.message);
    throw new SuprsendError(error_msg);
  }
}
function validate_workflow_trigger_body_schema(body) {
  if (!(body !== null && body !== void 0 && body.data)) {
    body.data = {};
  }
  if (!(body.data instanceof Object)) {
    throw new InputValueError("data must be a object");
  }
  var schema = workflow_trigger_schema;
  var v = new _jsonschema.Validator();
  var validated_data = v.validate(body, schema);
  if (validated_data.valid) {
    return body;
  } else {
    var error_obj = validated_data.errors[0];
    var error_msg = "".concat(error_obj.property, " ").concat(error_obj.message);
    throw new SuprsendError(error_msg);
  }
}
function validate_track_event_schema(body) {
  if (!(body !== null && body !== void 0 && body.properties)) {
    body.properties = {};
  }
  var schema = event_schema;
  var v = new _jsonschema.Validator();
  var validated_data = v.validate(body, schema);
  if (validated_data.valid) {
    return body;
  } else {
    var error_obj = validated_data.errors[0];
    var error_msg = "".concat(error_obj.property, " ").concat(error_obj.message);
    throw new SuprsendError(error_msg);
  }
}
function validate_list_broadcast_body_schema(body) {
  if (!(body !== null && body !== void 0 && body.data)) {
    body.data = {};
  }
  if (!(body.data instanceof Object)) {
    throw new InputValueError("data must be a object");
  }
  var schema = list_broadcast_schema;
  var v = new _jsonschema.Validator();
  var validated_data = v.validate(body, schema);
  if (validated_data.valid) {
    return body;
  } else {
    var error_obj = validated_data.errors[0];
    var error_msg = "".concat(error_obj.property, " ").concat(error_obj.message);
    throw new SuprsendError(error_msg);
  }
}
function get_apparent_workflow_body_size(body, is_part_of_bulk) {
  var extra_bytes = _constants.WORKFLOW_RUNTIME_KEYS_POTENTIAL_SIZE_IN_BYTES;
  var apparent_body = body;
  if (body !== null && body !== void 0 && body.data["$attachments"]) {
    var num_attachments = body.data["$attachments"].length;
    if (is_part_of_bulk) {
      if (_constants.ALLOW_ATTACHMENTS_IN_BULK_API) {
        if (_constants.ATTACHMENT_UPLOAD_ENABLED) {
          extra_bytes += num_attachments * _constants.ATTACHMENT_URL_POTENTIAL_SIZE_IN_BYTES;
          apparent_body = (0, _lodash.cloneDeep)(body);
          var _iterator = _createForOfIteratorHelper(apparent_body["data"]["$attachments"]),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var attach_data = _step.value;
              delete attach_data["data"];
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          // pass
        }
      } else {
        apparent_body = (0, _lodash.cloneDeep)(body);
        delete apparent_body["data"]["$attachments"];
      }
    } else {
      if (_constants.ATTACHMENT_UPLOAD_ENABLED) {
        extra_bytes += num_attachments * _constants.ATTACHMENT_URL_POTENTIAL_SIZE_IN_BYTES;
        apparent_body = (0, _lodash.cloneDeep)(body);
        var _iterator2 = _createForOfIteratorHelper(apparent_body["data"]["$attachments"]),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _attach_data = _step2.value;
            delete _attach_data["data"];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        // pass
      }
    }
  }
  var body_size = JSON.stringify(apparent_body).length;
  var apparent_body_size = body_size + extra_bytes;
  return apparent_body_size;
}
function get_apparent_event_size(event, is_part_of_bulk) {
  var _event$properties;
  var extra_bytes = 0;
  var apparent_body = event;
  if (event !== null && event !== void 0 && (_event$properties = event.properties) !== null && _event$properties !== void 0 && _event$properties["$attachments"]) {
    var num_attachments = event.properties["$attachments"].length;
    if (is_part_of_bulk) {
      if (_constants.ALLOW_ATTACHMENTS_IN_BULK_API) {
        if (_constants.ATTACHMENT_UPLOAD_ENABLED) {
          extra_bytes += num_attachments * _constants.ATTACHMENT_URL_POTENTIAL_SIZE_IN_BYTES;
          apparent_body = (0, _lodash.cloneDeep)(event);
          var _iterator3 = _createForOfIteratorHelper(apparent_body["properties"]["$attachments"]),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var attach_data = _step3.value;
              delete attach_data["data"];
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        } else {
          // pass
        }
      } else {
        apparent_body = (0, _lodash.cloneDeep)(body);
        delete apparent_body["properties"]["$attachments"];
      }
    } else {
      if (_constants.ATTACHMENT_UPLOAD_ENABLED) {
        extra_bytes += num_attachments * _constants.ATTACHMENT_URL_POTENTIAL_SIZE_IN_BYTES;
        apparent_body = (0, _lodash.cloneDeep)(body);
        var _iterator4 = _createForOfIteratorHelper(apparent_body["properties"]["$attachments"]),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _attach_data2 = _step4.value;
            delete _attach_data2["data"];
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else {
        // pass
      }
    }
  }
  var body_size = JSON.stringify(apparent_body).length;
  var apparent_size = body_size + extra_bytes;
  return apparent_size;
}
function get_apparent_identity_event_size(event) {
  var body_size = JSON.stringify(event).length;
  return body_size;
}
function get_apparent_list_broadcast_body_size(body) {
  var body_size = JSON.stringify(body).length;
  return body_size;
}
function invalid_record_json(failed_record, err) {
  var err_str;
  if (err instanceof InputValueError) {
    err_str = err.message;
  } else {
    // includes SuprsendValidationError,
    // OR any other error
    err_str = "".concat(err.message, "\n").concat(err.stack);
  }
  return {
    record: failed_record,
    error: err_str,
    code: 500
  };
}